#
# The following file is a template for a (Couchbase) semantic search tool.
#
record_kind: semantic_search

# The name of the tool must be a valid Python identifier (e.g., no spaces).
# This field is mandatory, and will be used as the name of a Python function.
name: defect_search

# A description for the function bound to this tool.
# This field is mandatory, and will be used in the docstring of a Python function.
description: >
  For general support agents - search for matching defect items using semantic search, based on provided tags.

# The inputs used to build a comparable representation for a semantic search.
# Inputs are described using a JSON object that follows the JSON schema standard.
# This field is mandatory, and will be used to build a Pydantic model.
# See https://json-schema.org/learn/getting-started-step-by-step for more info.
input: >
  {
    "type": "object",
    "properties": {
      "search_tags": {
        "type": "array",
        "items": { "type": "string" }
      }
    }
  }

# As a supplement to the tool similarity search, users can optionally specify search annotations.
# The values of these annotations MUST be strings (e.g., not 'true', but '"true"').
# This field is optional, and does not have to be present.
annotations:
  engineering: "false"


# The "secrets" field defines search keys that will be used to query a "secrets" manager.
# Note that these values are NOT the secrets themselves, rather they are used to lookup secrets.
secrets:
  - couchbase:
      conn_string: CB_CONN_STRING
      username: CB_USERNAME
      password: CB_PASSWORD

# Couchbase semantic search tools always involve a vector search.
vector_search:

  # A bucket, scope, and collection must be specified.
  # Semantic search across multiple collections is currently not supported.
  bucket: main
  scope: data
  collection: defects

  # All semantic search operations require that a (FTS) vector index is built.
  # In the future, we will relax this constraint.
  index: defects-fts

  # The vector_field refers to the field the vector index (above) was built on.
  # In the future, we will relax the constraint that an index exists on this field.
  vector_field: description_embedding

  # The text_field is the field name used in the tool output (i.e., the results).
  # In the future, we will support multi-field tool outputs for semantic search.
  text_field: concatenate

  # The embedding model used to generate the vector_field.
  # This embedding model field value is directly passed to sentence transformers.
  # In the future, we will add support for other types of embedding models.
  embedding_model: all-MiniLM-L12-v2

  # The number of candidates (i.e., the K value) to request for when performing a vector top-k search.
  # This field is optional, and defaults to k=3 if not specified.
  num_candidates: 3
